subroutine fillit(ary)
   integer, dimension (:), intent (out) :: ary
   do i = 1, size(ary)
      ary(i) = i ** 2
   end do  
end subroutine
subroutine printit(ary)
   integer, dimension (:) :: ary  
   do i = 1, size(ary)
      print *, ary(i)
   end do
end subroutine

program main      
implicit none      
   interface
      subroutine fillit(ary)
         integer, dimension (:), intent (out) :: ary
      end subroutine

      subroutine printit(ary)
         integer, dimension (:) :: ary
      end subroutine
   end interface

   integer, dimension (7) :: ary
   call fillit(ary)      
   call printit(ary)
   print, 0.0E+00
end program

! !> show the usage of type-bound procedures (pass/nopass arguments)
! module test_m
!    implicit none
!    private
!    public test_type
!    type test_type
!       integer :: i
!    contains
!       procedure, nopass :: print_hello
!       procedure         :: print_int
!    end type
! contains
!    !> do not process type specific data => nopass
!    subroutine print_hello
!       print *, "hello"
!    end subroutine

!    !> process type specific data => first argument is "this" of type "class(test_type)"
!    !! use class and not type below !!!!
!    subroutine print_int(this)
!       class(test_type), intent(in) :: this

!       print *, "i", this%i
!   end subroutine
! end module

! program main
!    use test_m
!    implicit none

!    integer :: i, n, nfact
!    integer, dimension(5) :: numbers
!    nfact = 1
!    print *, "hello" // "world"
!    print *, kind(.true.)
!    do i = 1,5
!       numbers(i) = i * 2.0
!    end do
!    numbers = (/ 1, 2, 3, 4, 5 /)
!    print*, numbers
! ! compute factorials
! do n = 1, 10
!    nfact = nfact * n  
!    ! printing the value of n and its factorial
!    print*,  n, " ", nfact   
! end do
!    ! type (test_type) :: obj

!    ! obj%i = 1
!    ! select case (3)
!    ! case (0)
!    ! case (1)
!    !    print *, "one"
!    ! case (2)
!    ! case default
!    !    print *, "two"
!    ! end select

!    ! if (obj%i .eq. 1) then
!    !    print *, "i is 1"
!    ! else
!    !    print *, "i is not 1"
!    ! endif
!    ! call obj%print_hello
!    ! call obj%print_int
!    ! print *, obj%i == 5
! end program
